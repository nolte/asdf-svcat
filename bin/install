#!/usr/bin/env bash

set -e
set -o pipefail


# required environment variables
: ${ASDF_INSTALL_TYPE?}
: ${ASDF_INSTALL_VERSION?}
: ${ASDF_INSTALL_PATH?}

# detect the tool name
readonly __dirname="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly toolname="$(basename "$(dirname "${__dirname}")")"

# make a temporary download directory with a cleanup hook
readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_${toolname}_XXXXXX")"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install() {
  local install_type=$1
  local version=$2
  local install_path=$3

  local platform="$(uname | tr '[:upper:]' '[:lower:]')"
  local bin_install_path="$install_path/bin"
  local binary_path="$bin_install_path/kamel"
  local -r download_url="$(get_download_url "${version}" "${platform}")"
  local -r download_path="${TMP_DOWNLOAD_DIR}/$(get_filename ${version} ${platform})"

  echo "Downloading ${toolname} version ${version} ${platform} from ${download_url}"
  if curl -fL -o "${download_path}" "${download_url}"; then
    echo "Cleaning ${toolname} previous binaries"
    rm -rf "${bin_install_path}/${toolname}"

    echo "Creating ${toolname} bin directory"
    mkdir -p "${bin_install_path}"

    echo "Extracting ${toolname} archive"
    mv "${download_path}" "${binary_path}"
    chmod +x "${binary_path}"
  else
    echo "Error: ${toolname} version ${version} not found" >&2
    exit 1
  fi
}


get_filename() {
  # todo add windows support
  local platform="$1"
  echo "svcat"
}

get_download_url() {
  local version="$1"
  local platform="$2"
  local filename="$(get_filename $platform)"
  echo "https://download.svcat.sh/cli/v${version}/${platform}/amd64/svcat"
}

install $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
